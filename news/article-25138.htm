<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://freesurgenode.github.io/news/article-25138.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>golang常用库包：Go依赖注入(DI)工具-wire使用</title>
        <meta name="description" content="google 出品的依赖注入库 wire：https://github.com/google/wire 什么是依赖注入 依赖注入 ，英文全名是 dependency injection，简写为 DI。" />
        <link rel="icon" href="/assets/website/img/freesurgenode/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/website/js/frontend/freesurgenode/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/freesurgenode/owl.carousel/css/owl.carousel.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/freesurgenode/owl.carousel/css/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/freesurgenode/aos/css/aos.css">
    <link rel="stylesheet" href="/assets/website/js/frontend/freesurgenode/jquery-flipster/css/jquery.flipster.css">
    <link rel="stylesheet" href="/assets/website/css/freesurgenode/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XL2JZC5QJD"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XL2JZC5QJD');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div id="mobile-menu-overlay"></div>
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container">
                        <a class="navbar-brand" href="/">
                <span>Free Surge Node</span>
            </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"><i class="mdi mdi-menu"> </i></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
                <div class="d-lg-none d-flex justify-content-between px-4 py-3 align-items-center">
                    Free Surge Node
                    <a href="javascript:;" class="close-menu"><i class="mdi mdi-close"></i></a>
                </div>
                <ul class="navbar-nav ml-auto align-items-center">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="#">关于</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="#">联系</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="page-body-wrapper">
        <section id="home" class="home" style="padding-top:80px;">
            <div class="container">
                <div class="row">
                    <div class="col-sm-12">
                        <div class="main-banner">
                            <div class="d-sm-flex justify-content-between">
                                <div>
                                    <div class="banner-title">
                                        <h1 class="font-weight-medium">golang常用库包：Go依赖注入(DI)工具-wire使用</h1>
                                    </div>
                                    <p class="mt-3">
                                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                                    </p>
                                </div>
                                <div class="mt-5 mt-lg-0">
                                    <img src="/assets/website/img/freesurgenode/group.png" alt="Free Surge Node" class="img-fluid">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <section class="our-process" id="about">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                          				  				  				<p>google 出品的依赖注入库 wire：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/google/wire"  target="_blank" rel="nofollow">https://github.com/google/wire</a></p> <h2 id="什么是依赖注入">什么是依赖注入</h2> <p>依赖注入 ，英文全名是 dependency injection，简写为 DI。</p> <p>百科解释：</p> <blockquote> <p>依赖注入是指程序运行过程中，如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部的注入。</p> </blockquote> <p>在用编程语言编写程序时，比如用 java 语言，会编写很多类，这些类之间相互调用，完成一个具体的功能。</p> <p>例如，从 MySQL 获取数据，那么需要一个 MySQL 操作类 。</p> <h3 id="第一次编写mysql操作类">第一次编写mysql操作类：</h3> <pre><code class="language-java">class MySQL{ }</code></pre> <p>要从 mysql 获取数据，那么 mysql 数据库的用户名，密码，地址等等这些配置信息，也是需要的，继续编写 MySQL 类：</p> <pre><code class="language-java">package com.demo.mysql  class MySQL {     getMySQLConfig() {         port = 3306;         username = "xxx";         password = "xxx";     }          initMySQL(){}         querySQL(){} }</code></pre> <p>进一步思考，上面的 MySQL 操作类程序有什么不妥的地方？</p> <blockquote> <p>编程原则里有一个原则就是：单一职责</p> </blockquote> <p>也就是说一个类最好只干一件事情。</p> <p>根据这个原则在看看 MySQL 类，里面有获取数据库配置数据，也有操作MySQL的方法，不是单一职责的。<br /> 那里面获取数据库配置数据，可不可以单独拎出来用一个类表示？ 当然可以。</p> <p>因为 MySQL 配置数据，多数是从文件里读取的，上面 MySQL 类是写死，这也是不合理的一个地方。<br /> 而配置文件的来源，可以是 yml 格式文件，也可以是 toml 格式文件，还可以是远程文件。</p> <h3 id="第二次编写mysql操作类">第二次编写mysql操作类：</h3> <p>修改上面的类，增加一个获取数据库配置的类：</p> <pre><code class="language-java">package com.demo.mysql  class MySQLConfig {       getMySQLConfig() {         // 从配置文件获取 mysql 配置数据     } }</code></pre> <p>获取数据的类变成：</p> <pre><code class="language-java">package com.demo.mysql  class MySQL {     initMySQL(){      // 获取数据库的配置信息      mysqlconfig = new MySQLConfig();     }         querySQL(){} }</code></pre> <p>思考一下，上面改写后的类有什么不妥的地方？<br /> 获取mysql的配置信息，是不是要在 MySQL 类里 new一下， 实例化一下，如果不在同一个包下，还要把配置类引入进来在才能实例化。这里能不能优化下，当然可以。</p> <p>直接把数据库配置类注入到 MySQL 操作类里。这就是<strong>依赖注入</strong>。</p> <ul> <li>依赖是什么？注入又是什么？<br /> mysql 操作类依赖谁？依赖数据库配置类。<br /> 注入什么？把数据库配置类注入到 mysql 操作类里。<br /> 注入是一个动作，把一个类注入到另外一个类。<br /> 依赖是一种关系，类关系，一个类要完全发挥作用，需要依赖另外一个类。</li> </ul> <p>要完成数据操作，mysql操作类是需要依赖数据库配置类的，把数据库配置类注入到mysql操作类里，就可以完成操作类功能。</p> <h3 id="第三次编写mysql操作类">第三次编写mysql操作类：</h3> <p>伪代码示例：</p> <pre><code class="language-java">package com.demo.mysql  class MySQL {     private MySQLConfig config     MySQL(MySQLConfig mysqlconfig) { // 数据库配置类这里注入到mysql操作类里         config = mysqlconfig     }     initMySQL(){          }         querySQL(){} }</code></pre> <p>把数据库配置类注入到mysql操作类里。</p> <p>写 java 的人都知道 java 框架里有一个 spring 全家桶，spring 框架包核心有2个，其中有一个核心就是 IoC，另一个是 aop。</p> <p>IoC 的全称：Inversion of Control，控制反转。</p> <p>这个<strong>控制反转</strong>也是面向对象编程原则之一。</p> <p>但是这个控制反转比较难理解，如果结合上面的 DI 来理解，就比较容易理解点。<br /> 可以把 DI 看作是 IoC 编程原则的一个具体实现。</p> <p>依赖注入还可以从另外的软件设计思想来理解：</p> <blockquote> <ol> <li>分离关注点</li> <li>高内聚，低耦合</li> </ol> </blockquote> <p>对数据库 mysql 的操作和 mysql 的配置信息，这个 2 个是可以相互独立，相分离的。</p> <h2 id="何时使用依赖注入">何时使用依赖注入</h2> <p>当你的项目规模不大，文件不是很多，一个文件调用只需要传入少量依赖对象时，这时使用依赖注入就会使程序变得繁琐。</p> <p>当规模变大，单个对象使用需要调用多个依赖对象时，而这些依赖又有自己依赖对象，这时对象创建变得繁琐，那么这时候依赖注入就可以出场了。</p> <h2 id="wire-概念说明">wire 概念说明</h2> <h3 id="wire-简介">wire 简介</h3> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/google/wire"  target="_blank" rel="nofollow">wire</a> 是由 google 开源的一个用 Go 语言实现的依赖注入代码生成工具。它能够根据你写的代码生成相应的依赖注入 Go 代码。</p> <p>与其他依赖注入工具不同，比如 uber 的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/uber-go/dig"  target="_blank" rel="nofollow">dig</a> 和 facebook 的<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/facebookgo/inject"  target="_blank" rel="nofollow">inject</a>，这 2 个工具都是使用反射实现的依赖注入，而且是运行时注入（runtime dependency injection）。</p> <p>wire 是编译代码时生成代码的依赖注入，是编译期间注入依赖代码（compile-time dependency injection）。而且代码生成期间，如果依赖注入有问题，生成依赖代码时就会出错，就可以报出问题来，而不必等到代码运行时才暴露出问题。</p> <h3 id="provider-和-injector">provider 和 injector</h3> <p>首先，需要理解<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/google/wire"  target="_blank" rel="nofollow">wire</a> 的 2 个核心概念：provider 和 injector。</p> <p>从上面 java 模拟依赖注入的例子中，可以简化出依赖注入的步骤：</p> <blockquote> <p>第一：需要 New 出一个类实例<br /> 第二：把这个 New 出来的类实例通过构造函数或者其他方式“注入”到需要使用它的类中<br /> 第三：在类中使用这个 New 出来的实例</p> </blockquote> <p>从上面步骤来理解 wire 的 2 个核心概念 provider 和 injector。</p> <blockquote> <p>provider 就相当于上面 New 出来的类实例。<br /> injector 就相当于“注入”动作前，把所需依赖函数进行聚合，根据这个聚合的函数生成依赖关系。</p> </blockquote> <p>provider：提供一个对象。<br /> injector：负责根据对象依赖关系，生成新程序。</p> <h4 id="provider">provider</h4> <p>provider 是一个普通的 Go 函数 ，可以理解为是一个对象的构造函数。为下面生成 injector 函数提供”构件“。</p> <p>看下面例子，来自<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://go.dev/blog/wire"  target="_blank" rel="nofollow">go blog</a>。</p> <blockquote> <p>这篇 blog 是 2018.10.9 发表，可能一些信息有点老，再参考<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/google/wire/blob/main/docs/guide.md"  target="_blank" rel="nofollow">github guide</a> ，这篇 guide 最后更新于 2021.1.26。</p> </blockquote> <p>下面的 NewUserStore() 函数可以看作是一个 provider。这个函数需要传入 *Config 和 *mysql.DB 2 个参数。</p> <pre><code class="language-go">// NewUserStore 是一个 provider for *UserStore，*UserStore 依赖 *Config，*mysql.DB func NewUserStore(cfg *Config, db *mysql.DB) (*UserStore, error) {... ...}  // NewDefaultConfig 是一个 provider for *Config，没有任何依赖 func NewDefaultConfig() *Config {...}  // NewDB 是 *mysql.DB 的一个 provider ，依赖于数据库连接信息 *ConnectionInfo func NewDB(info *ConnectionInfo) (*mysql.DB, error){...}</code></pre> <p>provider 可以组合成一组 provider set。对于经常在一起使用的 providers 来说，这个非常有用。使用<code>wire.NewSet</code> 方法可以把他们组合在一起，</p> <pre><code class="language-go">var SuperSet = wire.NewSet(NewUserStore, NewDefaultConfig)</code></pre> <p>你也可以把其他的 provider sets 加入一个 provider set，</p> <pre><code class="language-go">import （     “example.com/some/other/pkg” ）  // ... ... var MegaSet = wire.NewSet(SuperSet, pkg.OtherSet)</code></pre> <blockquote> <p><strong>wire.NewSet()</strong> 函数：</p> <p>这个函数可以把相关的 provider 组合在一起然后使用。当然也可以单独使用，如 var Provider = wire.NewSet(NewDB)。</p> <p>这个 NewSet 函数的返回值也可以作为其他 NewSet 函数的参数使用，比如上面的 SuperSet 作为参数使用。</p> </blockquote> <h4 id="injector">injector</h4> <p>我们编写程序把这些 providers 组合起来(比如下面例子 initUserStore() 函数)，wire 里的<code>wire</code> 命令会按照依赖顺序调用 providers 生成更加完整的函数，这个就是 injector。</p> <p>首先，编写生成 injector 的签名函数，然后用<code>wire</code> 命令生成相应的函数。</p> <p>例子如下：</p> <pre><code class="language-go">// +build wireinject  func initUserStore(info *ConnectionInfo) (*UserStore, error) {     wire.Build(SuperSet, NewDB) // 声明获取 UserStore 需要调用哪些 provider 函数     return nil, nil }</code></pre> <p>然后用<code>wire</code> 命令把上面的<code>initUserStore</code> 函数生成 injector 函数，生成的函数对应文件名 wire_gen.go。</p> <blockquote> <p><strong>wire</strong> 命令:</p> <p>You can generate the injector by invoking Wire in the package directory。</p> <p>直接在生成 injector 函数的包下，使用<code>wire</code> 命令，就可以生成 injector 代码。</p> <p><strong>wire.Build()</strong> 函数：</p> <p>它的参数可以是 wire.NewSet() 组织的一个或多个 provider，也可以直接使用 provider。</p> </blockquote> <h2 id="wire-使用">wire 使用</h2> <h3 id="wire-结构体和方法列表">wire 结构体和方法列表</h3> <pre><code class="language-go">func Build(...interface{}) string type Binding 	func Bind(iface, to interface{}) Binding type ProvidedValue 	func InterfaceValue(typ interface{}, x interface{}) ProvidedValue 	func Value(interface{}) ProvidedValue type ProviderSet 	func NewSet(...interface{}) ProviderSet type StructFields 	func FieldsOf(structType interface{}, fieldNames ...string) StructFields type StructProvider 	func Struct(structType interface{}, fieldNames ...string) StructProvider</code></pre> <p>更详细说明可以看这里<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pkg.go.dev/github.com/google/wire#pkg-index"  target="_blank" rel="nofollow">func index - pkg.go.dev</a>。</p> <h3 id="wire-安装">wire 安装</h3> <pre><code class="language-shell">go get github.com/google/wire/cmd/wire</code></pre> <h3 id="快速开始">快速开始</h3> <h4 id="例子1">例子1</h4> <p>先新建一个 basics 的文件夹，然后在 basics 里使用<code>go mod init basics</code>，新建一个 go.mod，在 go.mod 里引入 wire：<code>require github.com/google/wire v0.5.0</code>。</p> <p>整个文件夹目录结构:</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f832312605656535fb95240c7534ecd6.jpg" alt="golang常用库包：Go依赖注入(DI)工具-wire使用"></p> <ol> <li><strong>定义 providers</strong></li> </ol> <p>在 basics 文件夹下新建 basics.go 文件，写入如下代码：</p> <pre><code class="language-go">package main  import ( 	"context" 	"errors" )  type Student struct { 	ClassNo int }  // NewStudent 就是一个 provider，返回一个 Student func NewStudent() Student { 	return Student{ClassNo: 10} }  type Class struct { 	ClassNo int }  // NewClass 就是一个 provider，返回一个 Class func NewClass(stu Student) Class { 	return Class{ClassNo: stu.ClassNo} }  type School struct { 	ClassNo int }  // NewSchool 是一个 provider，返回一个 School // 与上面 provider 不同的是，它还返回了一个错误信息 func NewSchool(ctx context.Context, class Class) (School, error) { 	if class.ClassNo == 0 { 		return School{}, errors.New("cannot provider school when class is 0") 	} 	return School{ClassNo: class.ClassNo}, nil }</code></pre> <ol start="2"> <li><strong>定义 injector</strong></li> </ol> <p>新建文件 wire.go，代码如下：</p> <pre><code class="language-go">// +build wireinject  package main  import ( 	"github.com/google/wire" )  var SuperSet = wire.NewSet(NewStudent, NewClass, NewSchool)  func initSchool() (School, error) { 	wire.Build(SuperSet) 	return School{}, nil }</code></pre> <blockquote> <p>// +build wireinject</p> <p>这一行代码一定要在包最上面声明，表明这是一个准备被编译的 injector</p> </blockquote> <ol start="3"> <li><strong>用 wire 命令生成 injector 函数代码</strong></li> </ol> <p>用<code>wire</code> 命令生成 injector 代码，在 basics 目录下执行<code>wire</code> 命令：</p> <pre><code class="language-shell">$ wire wire: D:\work\mygo\go-practice2\di\wire\basics\wire.go:9:1: inject initSchool: no provider found for context.Context needed by basics.School in provider set "SuperSet" (D:\work\mygo\go-practice2\di\wire\basics\wire.go:7:16)  wire: basics: generate failed wire: at least one generate failure</code></pre> <p>报错了，看看显示出的错误信息，最主要是这一行信息：</p> <pre><code class="language-go">inject initSchool: no provider found for context.Context needed by basics.School in provider set "SuperSet"</code></pre> <p>来看一看 initSchool 函数，果然没有给它提供<code>context.Context</code> 。我们来修改函数，引入 context 包，然后给 initSchool 函数增加参数<code>context.Context</code>：</p> <pre><code class="language-go">func initSchool(ctx context.Context) (School, error) { 	wire.Build(SuperSet) 	return School{}, nil }</code></pre> <p>再来用命令<code>wire</code> 编译：</p> <pre><code class="language-shell">$ wire wire: basics: wrote D:\work\mygo\go-practice2\di\wire\basics\wire_gen.go</code></pre> <p>生成的 injector 代码，wire_gen.go 文件，</p> <pre><code class="language-go">// Code generated by Wire. DO NOT EDIT.  //go:generate go run github.com/google/wire/cmd/wire //+build !wireinject  package main  import ( 	"context" 	"github.com/google/wire" )  // Injectors from wire.go:  func initSchool(ctx context.Context) (School, error) { 	student := NewStudent() 	class := NewClass(student) 	school, err := NewSchool(ctx, class) 	if err != nil { 		return School{}, err 	} 	return school, nil }  // wire.go:  var SuperSet = wire.NewSet(NewStudent, NewClass, NewSchool)</code></pre> <h4 id="小结">小结</h4> <blockquote> <p>wire 使用的步骤：</p> <ol> <li>先编写 provider。</li> <li>再编写 injector：把相关 provider 组织在一起，成为一个 ProviderSet。</li> <li>最后用 wire 命令编译：wire 会根据 provider 之间相关依赖生成代码。</li> </ol> <p>wire.NewSet 函数：</p> <p>它可以把 provider 集合起来。作用1分类：可以把一组相关的 provider 写在一起组成 ProviderSet。作用1延伸第2个作用，避免 provider 过多难于管理。</p> <p>wite.Build 函数：</p> <pre><code>func Build(...interface{}) string</code></pre> <p>它的参数是 provider 不定长列表。 把所有相关的 provider 组织在一起然后生成 injector 函数代码。它是生成 injector 函数的模板函数。</p> </blockquote> <h3 id="绑定接口">绑定接口</h3> <p>上面例子1绑定的是结构体和构造函数。如果有接口 interface 参与呢，那怎么办？比如下面的代码，</p> <pre><code class="language-go">type Fooer interface {     Hello() }  type Foo struct{}  func (f Foo)Hello() {     fmt.Println("hello") }  func Bar struct{}  func NewBar() Bar {     return Bar{} }</code></pre> <p>有接口 Fooer，这个怎么绑定呢？这时候就可以用 [wire.Bind](<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/google/wire/blob/v0.5.0/wire.go#L113"  target="_blank" rel="nofollow">wire/wire.go at v0.5.0 · google/wire · GitHub</a>) 函数，</p> <pre><code class="language-go">var bind = wire.Bind(new(Fooer), new(Foo)) var set = wire.NewSet(bind, NewBar)  // or var set = wire.NewSet(wire.Bind(new(Fooer), new(Foo)), NewBar)</code></pre> <h3 id="struct-prividers">struct prividers</h3> <p>struct 也可以直接当作一个 provider 使用。如果结构体的 provider 仅仅是用作字段赋值，那么可以使用函数<code>wire.Struct</code> 来赋值。</p> <pre><code class="language-go">type Foo int type Bar int  func NewFoo() Foo {/* ... */} func NewBar() Bar {/* ... */}  type FooBar struct {     MyFoo Foo     MyBar Bar }  var set = wire.NewSet( 	NewFoo,     NewBar,     wire.Struct(new(FooBar), "MyFoo", "MyBar"), )</code></pre> <p>更多信息请参考<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/google/wire/blob/main/docs/guide.md#struct-providers"  target="_blank" rel="nofollow">struct providers guide</a></p> <h3 id="provider-set">Provider Set</h3> <p>上面例子1中就用到 provider set，把</p> <p>相关的 provider 组织在一起。使用函数<code>wire.NewSet</code> 就可以做到。</p> <p>更多例子请查看官方文档：</p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/google/wire"  target="_blank" rel="nofollow">https://github.com/google/wire</a></p> <h2 id="参考">参考</h2> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/google/wire"  target="_blank" rel="nofollow">https://github.com/google/wire</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/google/wire/blob/main/docs/guide.md"  target="_blank" rel="nofollow">https://github.com/google/wire/blob/main/docs/guide.md</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://go.dev/blog/wire"  target="_blank" rel="nofollow">https://go.dev/blog/wire</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://pkg.go.dev/github.com/google/wire#pkg-index"  target="_blank" rel="nofollow">wire func index - pkg</a></li> </ul> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-24674.htm">动物疫苗的种类和制备原理是什么意思 动物疫苗的种类和制备原理是什么意思啊</a></p>
                                        <p>下一个：<a href="/news/article-25139.htm">动物疫苗公司产量排名榜前十名（动物疫苗行业排名）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-9-27-free-subscribe-node.htm" title="9月27日→19.2M/S|2024年最新免费节点Free Surge Node订阅链接地址">9月27日→19.2M/S|2024年最新免费节点Free Surge Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-16-surge-windows.htm" title="11月16日→19.1M/S|2024年最新免费节点Free Surge Node订阅链接地址">11月16日→19.1M/S|2024年最新免费节点Free Surge Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-14-surge-node-share.htm" title="12月14日→21.5M/S|2024年最新免费节点Free Surge Node订阅链接地址">12月14日→21.5M/S|2024年最新免费节点Free Surge Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-20993.htm" title="6.0 vue3 watch监听函数（reactive篇）">6.0 vue3 watch监听函数（reactive篇）</a></li>
                        <li class="py-2"><a href="/news/article-22366.htm" title="宠物粮食加工厂需要投资多少钱呢知乎视频下载（宠物粮加工设备）">宠物粮食加工厂需要投资多少钱呢知乎视频下载（宠物粮加工设备）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-11-surge-node-share.htm" title="9月11日→20.2M/S|2024年最新免费节点Free Surge Node订阅链接地址">9月11日→20.2M/S|2024年最新免费节点Free Surge Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-17-free-node-subscribe-links.htm" title="9月17日→22.6M/S|2024年最新免费节点Free Surge Node订阅链接地址">9月17日→22.6M/S|2024年最新免费节点Free Surge Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-18726.htm" title="Go使用Gin+mysql实现增删改查">Go使用Gin+mysql实现增删改查</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-9-surge-node-github.htm" title="10月9日→20M/S|2024年最新免费节点Free Surge Node订阅链接地址">10月9日→20M/S|2024年最新免费节点Free Surge Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-13-surge-node-share.htm" title="12月13日→18.9M/S|2024年最新免费节点Free Surge Node订阅链接地址">12月13日→18.9M/S|2024年最新免费节点Free Surge Node订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">23</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
    </div>
        <footer class="footer">
        <div class="footer-bottom">
            <div class="container">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <p class="mb-0 text-small pt-1 pl-4">
                            <a href="/">Free Surge Node机场节点订阅官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </footer>
    <script src="/assets/website/js/frontend/freesurgenode/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/freesurgenode/base/vendor.bundle.base.js"></script>
    <script src="/assets/website/js/frontend/freesurgenode/owl.carousel/js/owl.carousel.js"></script>
    <script src="/assets/website/js/frontend/freesurgenode/aos/js/aos.js"></script>
    <script src="/assets/website/js/frontend/freesurgenode/jquery-flipster/js/jquery.flipster.min.js"></script>
    <script src="/assets/website/js/frontend/freesurgenode/template.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>